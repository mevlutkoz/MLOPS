Local repository ==> your local computer
Remote repository ==> hosted on hosting service like github, gitlab, bitbucket, codecommit

$git config --global --list ==> Returns the user.name
										   user.email


$git config --global user.name "mevlutkoz"
$git config --global user.email "kozmevlut@gmail.com"
$git config --global --list

$git config --global init.defaultBracnh main ==> Default branchi main yapıyoruz, bazen master olarak kaydediliyor bunu istemiyoruz. 
git config --global --list


.git dosyası senin çalıştıgın yeri local repository yapar.
git init command kullanarak o an ki çalıştıgımız yeri local repository yapabiliriz.
$git init ==> oldugumuz yerde bunu çalıştırarak local repository yaptık($ls -a)
Working Directory ==> contains a set of files that represent a version of the project, working directory local repo degil(local repo dedigimiz alan .git dosyasının içi), ama işimiz bitince oraya taşıyoruz.
Staging Area ==> Draft space, this is a file where you can add or remove the files(.git filenin içinde bir alan). Son kararımızı verdikten sonra commit ediyoruz
Commiting History ==> where your commit are existed.

working directory de file1.py diye bir dosya oluşturdum, bu şu anda untracked file, bunu stagind area'ya almam lazımki track edebileyim.
Working directory ==> move to the staging area ==> commit to repository
$git status ==> bize track infosu verir, hangi dosyalar trackli hangileri degil
Working area dan staging areaya taşımak için:
$git add file1.py
$git status
$git commit -m "my first commit" ==> commit ediyoruz
$git log  ==> commit history ve commentlere erişiyoruz


Branches in Git ==> moveable pointers to commit
file1.py dosyasının içerisine bir şeyler yazıyoruz ve status ile kontrol ediyoruz
$git status ==> modifiye ettigimizi ama staging ve commit etmedigimizi söylüyor
$git add . ==> tüm dosyaları staging areaya taşı demek
$git status ==> kontrol ediyoruz gitmişler mi staginge diye
$git commit -m "v2 eklendi" ==> staging de onları commit ediyoruz
$git log ==> kontrol ediyoruz mesajımızı ve commiti
$git branch ==> branch bilgisini alıyoruz
$git branch dev ==> dev isminde branch oluşturuyoruz
$git branch ==> branch oluşmuş mu bakıyoruz
$git log ==> HEAD hangi branchte oldugumuzu da söyler bize.
$git branch ==> HEAD ın nereyi gösterdigini yani oldugumuz branchi de söyler








